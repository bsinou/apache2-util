buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE")
    }
}

plugins {
	id "java"
	id "eclipse"
//	id "org.springframework.boot"
	id "com.moowork.node" version "1.2.0" // See #1
}

apply plugin: 'org.springframework.boot'


description = 'Simple tools to ease financial management of small organizations'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'fibu-service'
    version =  '0.1.1'
}

repositories {
    mavenCentral()
}


dependencies {
    compile(
    	// Spring boot starters
    	//"org.springframework.boot:spring-boot-starter-web", // MVC
	 	"org.springframework.boot:spring-boot-starter-thymeleaf",
    	"org.springframework.boot:spring-boot-starter-data-rest", // REST
   		"org.springframework.boot:spring-boot-starter-data-jpa", // JPA
 
   		"org.springframework.boot:spring-boot-starter-websocket", // Web sockets

		// Security
   		"org.springframework.boot:spring-boot-starter-security", 
   		"org.thymeleaf.extras:thymeleaf-extras-springsecurity4", 

		// Devtools
     	"org.springframework.boot:spring-boot-devtools",
 
    	// JPA
    	"com.h2database:h2", // Test with h2
    	"org.hibernate:hibernate-core",
    )

    testCompile(
    	"org.springframework.boot:spring-boot-starter-test"
    )
}

// For more tips, see https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseClasspath.html
eclipse {
	project {
		name = 'FiBu'
		comment = description
		
		// Add gradle nature
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		// More info and docs here: https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseProject.html
		// Manually add compulsory eclipse property files for buildship plugin
		def propFile = new File("$buildDir/../.settings/org.eclipse.buildship.core.prefs")
		propFile.parentFile.mkdirs();
		propFile.withWriter { w -> w << "connection.project.dir=\neclipse.preferences.version=1\n\n" }    	
		
		// Add Javascript folder to the src list at the top of eclipse's package explorer 
		// This puts the folder at the wrong place
		// sourceSets.main.java.srcDir "src/main/js"
	}
	
	classpath {
		// Default is false
		downloadJavadoc = true
		
		file {
			// manually add JavaScript folder to eclipse class path
      		withXml {
        		def root = it.asNode()
        		// check if js src folder is already there
        		def jsf = root.'classpathentry'.findAll { entry -> entry.@path == "src/main/js" } 
        		if (jsf.size()== 0){
	 		 		def node = new Node(root, "classpathentry", [ kind:"src", path:"src/main/js"]) 
					root.remove(node) // removes node from parent's children
					root.children().add(2, node) // re-inserts node at desired position in child list
				}
			}
      	}
  	}
}

// Notes

// #1: com.moowork.node plugin
// Enable to run any NodeJS script as part of the build. It does not depend on NodeJS (or NPM) being installed 
// The plugin will download and manage NodeJS distributions, unpack them into your local .gradle directory 
// and use them from there. See https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md


// #2 *Work in progress/draft* : Manually add JavaScript folder to eclipse class path

/*
// Below mechanism does not work because the real XML file seems to be generated after the eclipse task finished
// Kept  yet for the other patterns
task finalize  {
	doLast {
		println 'B4 tweack'
    	tweackClassPathFile()
    	println 'tweack done'
    }
}

tasks.eclipse.finalizedBy(finalize)

def tweackClassPathFile () {
	def classpath = (new XmlParser()).parse('.classpath')    
    def srcs = classpath.'classpathentry'.findAll { entry -> entry.@kind == "src"} 
	srcs.each { m ->  println "path: " + m.@path }
	
	// def fragmentToAdd = new XmlParser( false, true ).parseText( '<classpathentry kind="src" path="src/main/js"/>')
	// classpath.children().add( 1, fragmentToAdd )
		
	def node = new Node(classpath, "classpathentry", [ kind:"src", path:"src/main/js"]) // adds node as 2nd child
	classpath.remove(node) // removes node from parent's children
	classpath.children().add(2, node) // re-inserts node at desired position in child list
		
	//	def root = new XmlParser( false, true ).parseText( xml )
	//	Insert this new node at position 2 in the children of the first coreEntry node
	//	String outxml = groovy.xml.XmlUtil.serialize( root )
}
*/

